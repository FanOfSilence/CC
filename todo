
// What to do here?
// Blocks without return have to jump out of their block
// Blocks with a return take care of themselves
// Who should keep track of the labels?
// BStmt could send in a label to a block but how will it know that it is used?
// Option 1: BStmt creates a new label and stores it for the context. Use TypeChecker to see that the block returns in all paths
// Option 2: Update context to say if the label was used.
int main() {
    if (1 == 1) {
       printInt(1);
    }
    if (1 == 2) {
       if (3 == 4) {
       	  printInt(x);
       }
    }
    if (1 == 2) {
       return 1;
    }
    {
	printInt(1);
    }
    return 2;
}


//TODO1: First pass to add all global variables (the strings). Probably not needed
//TODO4: Probably have to branch on empty statement as well. Done
//TODO5: Do alpha renaming so that all testcases can pass. Only variables (not functions) need to be renamed but make sure they are renamed globally and not just per function
//TODO5.5: On that note, make sure it works correctly with parameters
//TODO6: Implement missing expressions correctly
//TODO7: Find a way to do lazy evaluation of || and &&
//TODO9: In while statement how to update the expression? Probably solved
//TODO10: Deal with types correctly (like float becomes double) and also special functions like fmul. Done
//TODO11: Types for variables need to be kept in map so that Inc and Decr can get the types (not a problem for epxressions because they are typed). Done
//TODO12: Right version of icmp?
//TODO13: Need lazy evaluation of expressions and need to branch to endLabel correctly
//TODO14:Parameters to functions need to be put into pointers at entry of function